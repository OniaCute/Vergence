package cc.vergence.modules.exploit;

import cc.vergence.Vergence;
import cc.vergence.features.event.events.PacketEvent;
import cc.vergence.features.managers.ui.NotifyManager;
import cc.vergence.features.options.Option;
import cc.vergence.features.options.impl.BooleanOption;
import cc.vergence.features.options.impl.DoubleOption;
import cc.vergence.modules.Module;
import cc.vergence.util.other.FastTimerUtil;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;

public class FastLatencyCalc extends Module {
    public  static FastLatencyCalc INSTANCE;
    private final FastTimerUtil timer = new FastTimerUtil();
    private final FastTimerUtil receivedTimer = new FastTimerUtil();
    private long time;
    private int latency;

    public FastLatencyCalc() {
        super("FastLatencyCalc", Category.EXPLOIT);
        INSTANCE = this;
    }

    public Option<Double> delay = addOption(new DoubleOption("Delay", 0, 1000, 100));
    public Option<Boolean> spikeNotify = addOption(new BooleanOption("spikeNotify", true));
    public Option<Double> threshold = addOption(new DoubleOption("Threshold", 0, 1000, 30, v -> spikeNotify.getValue()));

    @Override
    public String getDetails() {
        return "";
    }

    @Override
    public void onTick() {
        if (receivedTimer.passedMs(1000L) && timer.passedMs(delay.getValue().longValue())) {
            mc.getNetworkHandler().sendPacket(new RequestCommandCompletionsC2SPacket(1000, "/w "));
            time = System.currentTimeMillis();

            receivedTimer.reset();
            timer.reset();
        }
    }

    @Override
    public void onReceivePacket(PacketEvent.Receive event, Packet<?> packet) {
        if (event.getPacket() instanceof CommandSuggestionsS2CPacket packet1) {
            if (packet1.id() == 1000) {
                int ping = (int) (System.currentTimeMillis() - time);
                if (spikeNotify.getValue() && ping - latency > threshold.getValue().intValue()) {
                    NotifyManager.newNotification(this, Vergence.TEXT.get("Module.Modules.FastLatencyCalc.Messages.Spike"));
                }

                latency = ping;
                receivedTimer.reset();
            }
        }
    }

    public int getLatency() {
        return this.latency;
    }
}